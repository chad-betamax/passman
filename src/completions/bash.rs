use std::fs::{self, File, OpenOptions};
use std::io::{Read, Write};

/// Install file-based completion logic and inject wrapper into clap-generated script.
pub fn install_file_path_completion() -> anyhow::Result<()> {
    let dir = dirs::config_dir()
        .expect("Could not determine config dir")
        .join("bash/completions");

    let path = dir.join("passman.bash");

    // Ensure dir exists and script is generated by clap first
    fs::create_dir_all(&dir)?;
    if !path.exists() {
        return Ok(()); // If clap completions haven't run yet
    }

    // Read the existing completion script
    let mut contents = String::new();
    File::open(&path)?.read_to_string(&mut contents)?;

    // Only inject if we haven't already
    if contents.contains("_passman_wrapper") {
        return Ok(());
    }

    let wrapper = r#"
# === Passman wrapper to combine clap + custom file completions ===
_passman_wrapper() {
    local cur subcommand
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    subcommand="${COMP_WORDS[1]}"

    if [[ "$subcommand" == "list" || "$subcommand" == "show" ]]; then
        local files
        files=$(find ~/.passman/vault -type f -name '*.rage' 2>/dev/null \
            | sed "s|^$HOME/.passman/vault/||;s|.rage$||")
        COMPREPLY=( $(compgen -W "${files}" -- "$cur") )
    else
        _passman_clap "$@"
    fi
}

complete -F _passman_wrapper passman

"#;

    let mut file = OpenOptions::new().append(true).open(&path)?;
    file.write_all(wrapper.as_bytes())?;

    Ok(())
}
